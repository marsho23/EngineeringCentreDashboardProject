@using System.Security.Claims;
@model EngineeringCentreDashboardWebApp.Models.WeatherResponse

@{
    ViewData["Title"] = "Dashboard";
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootswatch/4.5.2/vapor/bootstrap.min.css">
</head>
<body>

    <div class="container">
        <div class="row">

            <div class="col-sm">
                <h2>Calendar Events</h2>
                <div id="calendarEventsContainer"></div>
            </div>
            <div class="col-sm">
                <h2>To Do List</h2>
                <div id="todoListContainer"></div>
                <button id="addTodoButton" class="btn btn-primary mb-2">Add</button>
                <button id="deleteAllCompletedButton" class="btn btn-danger mb-2">Delete All Completed</button>
            </div>
            <div class="col-sm">
                <h2>Today's Weather</h2>
                @if (Model.City != null)
                {
                    <p class="lead">@Model.City.Name, @Model.City.Country</p>
                }
                <div class="weather-card">
                    <div class="card-body">
                        @*<h5 class="card-title">Main Weather Information</h5>*@
                        <p class="card-text">Temperature: @Model.List[0].Main.Temp &#8451;</p>
                        <p class="card-text">Feels Like: @Model.List[0].Main.Feels_like &#8451;</p>
                        <p class="card-text">Pressure: @Model.List[0].Main.Pressure hPa</p>
                        <p class="card-text">Humidity: @Model.List[0].Main.Humidity %</p>
                    </div>
                </div>
                <div class="weather-card">
                    <div class="card-body">
                        <p></p>
                        @*<h5 class="card-title">Additional Weather Information</h5>*@
                        @foreach (var weather in Model.List[0].Weather)
                        {
                            <p class="card-text">Description: @weather.Description</p>
                            <p class="card-text">Icon: <img src="https://openweathermap.org/img/wn/@(weather.Icon)" alt="Weather Icon" /></p>
                        }
                        <p class="card-text">Clouds: @Model.List[0].Clouds.All %</p>
                        <p class="card-text">Wind Speed: @Model.List[0].Wind.Speed m/s</p>
                        <p class="card-text">Wind Direction: @Model.List[0].Wind.Deg &deg;</p>
                    </div>
                </div>

            </div>
        </div>
    </div>
    

    <div id="addTodoModal" class="modal">
        <div class="modal-content">
            <span id="closeModalButton" class="close">&times;</span>
            <h2>Add New To-Do</h2>
            <input type="text" id="titleInput" placeholder="Title">
            <input type="text" id="descriptionInput" placeholder="Description">
            <input type="date" id="dueDateInput">
            <input type="hidden" id="userEmailInput" value="@ViewData["email"]">
            <button id="submitTodoModalButton">Submit</button>
        </div>
    </div>



    <div class="logout-container">
        <form id="logoutForm" asp-action="Logout" asp-controller="Weather" method="post">
            <button type="submit" class="btn btn-primary">Logout</button>
        </form>
    </div>

    <style>
        .completed-task {
            background-color: dimgrey;
        }

        .weather-card {
            background-color: none;
        }

        .logout-container {
            position: absolute;
            top: 10px;
            right: 10px;
        }

            .logout-container button {
                padding: 5px 10px;
            }

        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.4);
        }

        .modal-content {
            background-color: #fff;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 50%;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
    </style>

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        var user = '@ViewData["email"]';
        var name = '@ViewData["name"]';
        var userId = '@ViewData["userId"]';
        console.log(userId);
        console.log(user);

        function refreshToDoList(email) {
            axios.get('https://localhost:7181/api/ToDo/getByUserLoginId?email=' + email)
                .then(function (response) {
                    var data = response.data;
                    var container = document.getElementById('todoListContainer');
                    container.innerHTML = '';
                    data.forEach(todo => {
                        var card = document.createElement('div');
                        card.className = 'card mb-3';
                        if (todo.isCompleted) { 
                            console.log(todo.isCompleted);
                            card.className += ' completed-task';
                        }
                        card.innerHTML = `
                        <div class="card-header">${todo.title}</div>
                        <div class="card-body">
                            <p class="card-text">${todo.description}</p>
                            <p class="card-text">Due Date: ${new Date(todo.dueDate).toLocaleDateString()}</p>
                        </div>
                        <div class="card-footer">
                    `;
                        if (!todo.isCompleted) {
                            card.innerHTML += `
                            <button onclick="completeToDoItem('${todo.id}')" class="btn btn-warning">Done</button>
                        `;
                        }
                        card.innerHTML += `
                            <button onclick="deleteToDoItem('${todo.id}')" class="btn btn-danger">Delete</button>
                        </div>
                    `;
                        container.appendChild(card);
                    });

                })
        }

        function refreshCalendarEvents() {
            axios.get('https://localhost:7181/api/GoogleCalendar/get')
                .then(function (response) {
                    var data = response.data;
                    var container = document.getElementById('calendarEventsContainer');
                    container.innerHTML = '';  

                    data.forEach(event => {
                        var eventContainer = document.createElement('div');
                        eventContainer.className = 'container mb-4 border';

                        var startTime = new Date(event.startDateTime);
                        var endTime = new Date(event.endDateTime);

                        eventContainer.innerHTML = `
                            <div class="row">
                                <div class="col-4"><strong>Event Summary:</strong></div>
                                <div class="col-8">${event.summary}</div>
                            </div>
                            <div class="row mt-2">
                                <div class="col-4"><strong>Start Time:</strong></div>
                                <div class="col-8">${startTime.toLocaleString()}</div>
                            </div>
                            <div class="row mt-2">
                                <div class="col-4"><strong>End Time:</strong></div>
                                <div class="col-8">${endTime.toLocaleString()}</div>
                            </div>
                        `;

                        container.appendChild(eventContainer);
                    });
                })
                .catch(function (error) {
                    console.log(error);
                });
        }


        function deleteToDoItem(id) {
            axios.delete(`https://localhost:7181/api/ToDo/delete?id=${id}`)
                .then(function (response) {
                    console.log('Deleted item with ID:', id);
                    refreshToDoList(user);
                })
                .catch(function (error) {
                    console.log(error);
                });
        }

        function completeToDoItem(id) {
            axios.put(`https://localhost:7181/api/ToDo/CompleteTask?id=${id}`)
                .then(function (response) {
                    console.log('completed item with ID:', id);
                    refreshToDoList(user);
                })
                .catch(function (error) {
                    console.log(error);
                });
        }

        function updateToDoItem(id) {
            console.log('Edit item with ID:', id);
        }

        function showAddTodoForm() {
            document.getElementById('addTodoModal').style.display = 'block';
        }

        function hideAddTodoForm() {
            document.getElementById('addTodoModal').style.display = 'none';
        }
        function deleteAllCompletedTodos() {
            if (!confirm('Are you sure you want to delete all completed tasks?')) {
                return;
            }

            axios.delete(`https://localhost:7181/api/ToDo/deleteAllCompleted?userLoginId=${userId}`)
                .then(function (response) {
                    console.log('Deleted all completed tasks for user:', user);
                    refreshToDoList(user);
                })
                .catch(function (error) {
                    console.log(error);
                });
        }


        document.getElementById('addTodoButton').addEventListener('click', showAddTodoForm);
        document.getElementById('deleteAllCompletedButton').addEventListener('click', deleteAllCompletedTodos);


        document.getElementById('closeModalButton').addEventListener('click', hideAddTodoForm);

        document.getElementById('submitTodoModalButton').addEventListener('click', function () {
            const titleInput = document.getElementById('titleInput');
            const descriptionInput = document.getElementById('descriptionInput');
            const dueDateInput = document.getElementById('dueDateInput');

            const newTodo = {
                title: titleInput.value,
                description: descriptionInput.value,
                dueDate: dueDateInput.value,
                userLoginId: userId
            };

            axios.post('https://localhost:7181/api/ToDo/add', newTodo)
                .then(function (response) {
                    console.log('New to-do added:', response.data);
                    hideAddTodoForm();
                    refreshToDoList(user);
                })
                .catch(function (error) {
                    console.log(error);
                });

            hideAddTodoForm();
        });

        // Call the initial functions
        refreshToDoList(user);
        refreshCalendarEvents();

    </script>

</body>
</html>
